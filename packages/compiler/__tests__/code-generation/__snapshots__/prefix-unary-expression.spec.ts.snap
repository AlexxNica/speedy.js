// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PrefixUnaryExpression minusMinus 1`] = `
"; ModuleID = 'prefix-unary-expression/minusMinus.ts'
source_filename = \\"prefix-unary-expression/minusMinus.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_minusMinus() {
entry:
  %doubleValue = alloca double
  %intValue = alloca i32
  store i32 10, i32* %intValue, align 4
  store double 1.000000e+01, double* %doubleValue, align 8
  %intValue1 = load i32, i32* %intValue, align 4
  %sub = sub i32 %intValue1, 1
  store i32 %sub, i32* %intValue, align 4
  %doubleValue2 = load double, double* %doubleValue, align 8
  %fsub = fsub double %doubleValue2, 1.000000e+00
  store double %fsub, double* %doubleValue, align 8
  ret void
}
"
`;

exports[`PrefixUnaryExpression neg 1`] = `
"; ModuleID = 'prefix-unary-expression/neg.ts'
source_filename = \\"prefix-unary-expression/neg.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_minus() {
entry:
  %doubleValue = alloca double
  %intValue = alloca i32
  store i32 10, i32* %intValue, align 4
  store double 1.000000e+01, double* %doubleValue, align 8
  %intValue1 = load i32, i32* %intValue, align 4
  %neg = sub i32 0, %intValue1
  %doubleValue2 = load double, double* %doubleValue, align 8
  %neg3 = fsub double -0.000000e+00, %doubleValue2
  ret void
}
"
`;

exports[`PrefixUnaryExpression not 1`] = `
"; ModuleID = 'prefix-unary-expression/not.ts'
source_filename = \\"prefix-unary-expression/not.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_not() {
entry:
  %doubleValue = alloca double
  %intValue = alloca i32
  %boolValue = alloca i1
  store i1 false, i1* %boolValue, align 1
  store i32 10, i32* %intValue, align 4
  store double 1.000000e+01, double* %doubleValue, align 8
  %boolValue1 = load i1, i1* %boolValue, align 1
  %not = xor i1 %boolValue1, true
  %intValue2 = load i32, i32* %intValue, align 4
  %intValue2AsBool = icmp ne i32 %intValue2, 0
  %not3 = xor i1 %intValue2AsBool, true
  %doubleValue4 = load double, double* %doubleValue, align 8
  %doubleValue4AsBool = fcmp one double %doubleValue4, 0.000000e+00
  %not5 = xor i1 %doubleValue4AsBool, true
  ret void
}
"
`;

exports[`PrefixUnaryExpression plusPlus 1`] = `
"; ModuleID = 'prefix-unary-expression/plusPlus.ts'
source_filename = \\"prefix-unary-expression/plusPlus.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_plusPlus() {
entry:
  %doubleValue = alloca double
  %intValue = alloca i32
  store i32 10, i32* %intValue, align 4
  store double 1.000000e+01, double* %doubleValue, align 8
  %intValue1 = load i32, i32* %intValue, align 4
  %add = add i32 %intValue1, 1
  store i32 %add, i32* %intValue, align 4
  %doubleValue2 = load double, double* %doubleValue, align 8
  %fadd = fadd double %doubleValue2, 1.000000e+00
  store double %fadd, double* %doubleValue, align 8
  ret void
}
"
`;

exports[`PrefixUnaryExpression tilde 1`] = `
"; ModuleID = 'prefix-unary-expression/tilde.ts'
source_filename = \\"prefix-unary-expression/tilde.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_tilde() {
entry:
  %boolValue = alloca i1
  %doubleValue = alloca double
  %intValue = alloca i32
  store i32 10, i32* %intValue, align 4
  store double 1.000000e+01, double* %doubleValue, align 8
  store i1 false, i1* %boolValue, align 1
  %intValue1 = load i32, i32* %intValue, align 4
  %not = xor i32 %intValue1, -1
  %boolValue2 = load i1, i1* %boolValue, align 1
  %boolValue2AsInt32 = zext i1 %boolValue2 to i32
  %not3 = xor i32 %boolValue2AsInt32, -1
  %doubleValue4 = load double, double* %doubleValue, align 8
  %doubleValue4AsInt32 = call i32 @toInt32d(double %doubleValue4)
  %not5 = xor i32 %doubleValue4AsInt32, -1
  ret void
}

declare i32 @toInt32d(double)
"
`;
