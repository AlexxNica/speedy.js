// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Array arrayLiteral 1`] = `
"; ModuleID = 'array/arrayLiteral.ts'
source_filename = \\"array/arrayLiteral.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [4 x i32] [i32 1, i32 2, i32 3, i32 4]

define { i32, i32, i4* }* @_arrayLiteral() {
entry:
  %items = alloca [4 x i32]
  %empty = alloca { i32, i32, i4* }*
  %return = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %empty, align 4
  %items1 = getelementptr inbounds [4 x i32], [4 x i32]* %items, i32 0, i32 0
  %0 = bitcast [4 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([4 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 4), i32 0, i1 false)
  %constructorReturnValue2 = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 4)
  store { i32, i32, i4* }* %constructorReturnValue2, { i32, i32, i4* }** %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %return, align 4
  ret { i32, i32, i4* }* %return3
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array assignment 1`] = `
"; ModuleID = 'array/assignment.ts'
source_filename = \\"array/assignment.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3]

define void @_arrayAssignment() {
entry:
  %value = alloca double
  %other = alloca { i32, i32, i4* }*
  %items = alloca [3 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [3 x i32], [3 x i32]* %items, i32 0, i32 0
  %0 = bitcast [3 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([3 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 3), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 3)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  store { i32, i32, i4* }* %array2, { i32, i32, i4* }** %other, align 4
  %other3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %other, align 4
  %1 = call double @ArrayId_geti({ i32, i32, i4* }* %other3, i32 2)
  store double %1, double* %value, align 8
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare double @ArrayId_geti({ i32, i32, i4* }*, i32)

declare void @ArrayId_setid({ i32, i32, i4* }*, i32, double)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array elementAccess 1`] = `
"; ModuleID = 'array/elementAccess.ts'
source_filename = \\"array/elementAccess.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5]

define void @_arrayElementAccess() {
entry:
  %items = alloca [5 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = bitcast [5 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([5 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 5), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 5)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %1 = call i32 @ArrayIi_geti({ i32, i32, i4* }* %array3, i32 2)
  %2 = mul i32 %1, 10
  call void @ArrayIi_setii({ i32, i32, i4* }* %array2, i32 2, i32 %2)
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare i32 @ArrayIi_geti({ i32, i32, i4* }*, i32)

declare void @ArrayIi_setii({ i32, i32, i4* }*, i32, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array fill 1`] = `
"; ModuleID = 'array/fill.ts'
source_filename = \\"array/fill.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_arrayFill() {
entry:
  %array = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayId_constructori(i32 100)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array1 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue = call { i32, i32, i4* }* @ArrayId_filld({ i32, i32, i4* }* %array1, double 1.000000e+01)
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue3 = call { i32, i32, i4* }* @ArrayId_filldi({ i32, i32, i4* }* %array2, double 1.000000e+01, i32 5)
  %array4 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %fillReturnValue5 = call { i32, i32, i4* }* @ArrayId_filldii({ i32, i32, i4* }* %array4, double 1.000000e+01, i32 5, i32 50)
  ret void
}

declare { i32, i32, i4* }* @ArrayId_constructori(i32)

declare { i32, i32, i4* }* @ArrayId_filld({ i32, i32, i4* }*, double)

declare { i32, i32, i4* }* @ArrayId_filldi({ i32, i32, i4* }*, double, i32)

declare { i32, i32, i4* }* @ArrayId_filldii({ i32, i32, i4* }*, double, i32, i32)

declare void @speedyJsGc()
"
`;

exports[`Array length 1`] = `
"; ModuleID = 'array/length.ts'
source_filename = \\"array/length.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_arrayLength() {
entry:
  %i = alloca i32
  %array = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayId_constructorPdi(double* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array1 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  call void @ArrayId_lengthi({ i32, i32, i4* }* %array1, i32 100)
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %0 = call i32 @ArrayId_length({ i32, i32, i4* }* %array2)
  store i32 %0, i32* %i, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayId_constructorPdi(double*, i32)

declare i32 @ArrayId_length({ i32, i32, i4* }*)

declare void @ArrayId_lengthi({ i32, i32, i4* }*, i32)

declare void @speedyJsGc()
"
`;

exports[`Array new 1`] = `
"; ModuleID = 'array/new.ts'
source_filename = \\"array/new.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [1 x i1] [i1 true]
@items.1 = private local_unnamed_addr constant [3 x double] [double 1.000000e+00, double 2.000000e+00, double 3.000000e+00]

define void @_arrayConstructorCase() {
entry:
  %items4 = alloca [3 x double]
  %arrayWithElements = alloca { i32, i32, i4* }*
  %items = alloca [1 x i1]
  %arrayWithElement = alloca { i32, i32, i4* }*
  %arrayOfSize = alloca { i32, i32, i4* }*
  %emptyArray = alloca { i32, i32, i4* }*
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIb_constructorPbi(i1* null, i32 0)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %emptyArray, align 4
  %constructorReturnValue1 = call { i32, i32, i4* }* @ArrayIi_constructori(i32 1000)
  store { i32, i32, i4* }* %constructorReturnValue1, { i32, i32, i4* }** %arrayOfSize, align 4
  %items2 = getelementptr inbounds [1 x i1], [1 x i1]* %items, i32 0, i32 0
  %0 = bitcast [1 x i1]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([1 x i1]* @items to i8*), i32 ptrtoint (i1* getelementptr (i1, i1* null, i32 1) to i32), i32 0, i1 false)
  %constructorReturnValue3 = call { i32, i32, i4* }* @ArrayIb_constructorPbi(i1* %items2, i32 1)
  store { i32, i32, i4* }* %constructorReturnValue3, { i32, i32, i4* }** %arrayWithElement, align 4
  %items5 = getelementptr inbounds [3 x double], [3 x double]* %items4, i32 0, i32 0
  %1 = bitcast [3 x double]* %items4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* bitcast ([3 x double]* @items.1 to i8*), i32 mul nuw (i32 ptrtoint (double* getelementptr (double, double* null, i32 1) to i32), i32 3), i32 0, i1 false)
  %constructorReturnValue6 = call { i32, i32, i4* }* @ArrayId_constructorPdi(double* %items5, i32 3)
  store { i32, i32, i4* }* %constructorReturnValue6, { i32, i32, i4* }** %arrayWithElements, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIb_constructorPbi(i1*, i32)

declare { i32, i32, i4* }* @ArrayIi_constructori(i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare { i32, i32, i4* }* @ArrayId_constructorPdi(double*, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array pop 1`] = `
"; ModuleID = 'array/pop.ts'
source_filename = \\"array/pop.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [2 x i32] [i32 1, i32 2]

define void @_arrayPop() {
entry:
  %end = alloca i32
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = bitcast [2 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([2 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %popReturnValue = call i32 @ArrayIi_pop({ i32, i32, i4* }* %array2)
  store i32 %popReturnValue, i32* %end, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare i32 @ArrayIi_pop({ i32, i32, i4* }*)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array push 1`] = `
"; ModuleID = 'array/push.ts'
source_filename = \\"array/push.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [2 x i32] [i32 1, i32 2]
@items.1 = private local_unnamed_addr constant [1 x i32] [i32 1]
@items.2 = private local_unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3]

define void @_arrayPush() {
entry:
  %items8 = alloca [3 x i32]
  %newLength = alloca i32
  %items4 = alloca [1 x i32]
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = bitcast [2 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([2 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %pushReturnValue = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array2, i32* null, i32 0)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items5 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  %1 = bitcast [1 x i32]* %items4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* bitcast ([1 x i32]* @items.1 to i8*), i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 0, i1 false)
  %pushReturnValue6 = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array3, i32* %items5, i32 1)
  %array7 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items9 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  %2 = bitcast [3 x i32]* %items8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %2, i8* bitcast ([3 x i32]* @items.2 to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 3), i32 0, i1 false)
  %pushReturnValue10 = call i32 @ArrayIi_pushPii({ i32, i32, i4* }* %array7, i32* %items9, i32 3)
  store i32 %pushReturnValue10, i32* %newLength, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare i32 @ArrayIi_pushPii({ i32, i32, i4* }*, i32*, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array shift 1`] = `
"; ModuleID = 'array/shift.ts'
source_filename = \\"array/shift.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [2 x i32] [i32 1, i32 2]

define void @_arrayShift() {
entry:
  %front = alloca i32
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = bitcast [2 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([2 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %shiftReturnValue = call i32 @ArrayIi_shift({ i32, i32, i4* }* %array2)
  store i32 %shiftReturnValue, i32* %front, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare i32 @ArrayIi_shift({ i32, i32, i4* }*)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array slice 1`] = `
"; ModuleID = 'array/slice.ts'
source_filename = \\"array/slice.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]

define void @_arraySlice() {
entry:
  %items = alloca [10 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 0
  %0 = bitcast [10 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([10 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 10), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 10)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %sliceReturnValue = call { i32, i32, i4* }* @ArrayIi_slice({ i32, i32, i4* }* %array2)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %sliceReturnValue4 = call { i32, i32, i4* }* @ArrayIi_slicei({ i32, i32, i4* }* %array3, i32 4)
  %array5 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %sliceReturnValue6 = call { i32, i32, i4* }* @ArrayIi_sliceii({ i32, i32, i4* }* %array5, i32 4, i32 8)
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare { i32, i32, i4* }* @ArrayIi_slice({ i32, i32, i4* }*)

declare { i32, i32, i4* }* @ArrayIi_slicei({ i32, i32, i4* }*, i32)

declare { i32, i32, i4* }* @ArrayIi_sliceii({ i32, i32, i4* }*, i32, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array splice 1`] = `
"; ModuleID = 'array/splice.ts'
source_filename = \\"array/splice.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [10 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10]
@items.1 = private local_unnamed_addr constant [4 x i32] [i32 11, i32 12, i32 13, i32 14]

define void @_arraySplice() {
entry:
  %items6 = alloca [4 x i32]
  %items = alloca [10 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [10 x i32], [10 x i32]* %items, i32 0, i32 0
  %0 = bitcast [10 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([10 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 10), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 10)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %spliceReturnValue = call { i32, i32, i4* }* @ArrayIi_spliceii({ i32, i32, i4* }* %array2, i32 5, i32 2)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %spliceReturnValue4 = call { i32, i32, i4* }* @ArrayIi_splicei({ i32, i32, i4* }* %array3, i32 4)
  %array5 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items7 = getelementptr inbounds [4 x i32], [4 x i32]* %items6, i32 0, i32 0
  %1 = bitcast [4 x i32]* %items6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* bitcast ([4 x i32]* @items.1 to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 4), i32 0, i1 false)
  %spliceReturnValue8 = call { i32, i32, i4* }* @ArrayIi_spliceiiPii({ i32, i32, i4* }* %array5, i32 2, i32 2, i32* %items7, i32 4)
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare { i32, i32, i4* }* @ArrayIi_spliceii({ i32, i32, i4* }*, i32, i32)

declare { i32, i32, i4* }* @ArrayIi_splicei({ i32, i32, i4* }*, i32)

declare { i32, i32, i4* }* @ArrayIi_spliceiiPii({ i32, i32, i4* }*, i32, i32, i32*, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`Array unshift 1`] = `
"; ModuleID = 'array/unshift.ts'
source_filename = \\"array/unshift.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [2 x i32] [i32 1, i32 2]
@items.1 = private local_unnamed_addr constant [1 x i32] [i32 1]
@items.2 = private local_unnamed_addr constant [3 x i32] [i32 1, i32 2, i32 3]

define void @_arrayUnshift() {
entry:
  %items8 = alloca [3 x i32]
  %newLength = alloca i32
  %items4 = alloca [1 x i32]
  %items = alloca [2 x i32]
  %array = alloca { i32, i32, i4* }*
  %items1 = getelementptr inbounds [2 x i32], [2 x i32]* %items, i32 0, i32 0
  %0 = bitcast [2 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([2 x i32]* @items to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 2), i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i4* }* @ArrayIi_constructorPii(i32* %items1, i32 2)
  store { i32, i32, i4* }* %constructorReturnValue, { i32, i32, i4* }** %array, align 4
  %array2 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %unshiftReturnValue = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array2, i32* null, i32 0)
  %array3 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items5 = getelementptr inbounds [1 x i32], [1 x i32]* %items4, i32 0, i32 0
  %1 = bitcast [1 x i32]* %items4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %1, i8* bitcast ([1 x i32]* @items.1 to i8*), i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 0, i1 false)
  %unshiftReturnValue6 = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array3, i32* %items5, i32 1)
  %array7 = load { i32, i32, i4* }*, { i32, i32, i4* }** %array, align 4
  %items9 = getelementptr inbounds [3 x i32], [3 x i32]* %items8, i32 0, i32 0
  %2 = bitcast [3 x i32]* %items8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %2, i8* bitcast ([3 x i32]* @items.2 to i8*), i32 mul nuw (i32 ptrtoint (i32* getelementptr (i32, i32* null, i32 1) to i32), i32 3), i32 0, i1 false)
  %unshiftReturnValue10 = call i32 @ArrayIi_unshiftPii({ i32, i32, i4* }* %array7, i32* %items9, i32 3)
  store i32 %unshiftReturnValue10, i32* %newLength, align 4
  ret void
}

declare { i32, i32, i4* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

declare i32 @ArrayIi_unshiftPii({ i32, i32, i4* }*, i32*, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;
