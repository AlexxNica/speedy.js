// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Classes array-with-objects-literal 1`] = `
"; ModuleID = 'classes/array-with-objects-literal.ts'
source_filename = \\"classes/array-with-objects-literal.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@Point_name = private unnamed_addr constant [6 x i8] c\\"Point\\\\00\\"
@Point_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Point_name }

define double @_arrayWithObjectLiterals() {
entry:
  %items = alloca [3 x { { [6 x i8]* }*, double, double }*]
  %array = alloca { i32, i32, i8** }*
  %return = alloca double
  %constructorReturnValue = call { { [6 x i8]* }*, double, double }* @\\"classes/array-with-objects-literal.ts$Point$11constructordd\\"(double 1.000000e+00, double 2.000000e+00)
  %constructorReturnValue1 = call { { [6 x i8]* }*, double, double }* @\\"classes/array-with-objects-literal.ts$Point$11constructordd\\"(double 3.000000e+00, double 4.000000e+00)
  %constructorReturnValue2 = call { { [6 x i8]* }*, double, double }* @\\"classes/array-with-objects-literal.ts$Point$11constructordd\\"(double 5.000000e+00, double 6.000000e+00)
  %items3 = getelementptr inbounds [3 x { { [6 x i8]* }*, double, double }*], [3 x { { [6 x i8]* }*, double, double }*]* %items, i32 0, i32 0
  %0 = getelementptr inbounds [3 x { { [6 x i8]* }*, double, double }*], [3 x { { [6 x i8]* }*, double, double }*]* %items, i32 0, i32 0
  store { { [6 x i8]* }*, double, double }* %constructorReturnValue, { { [6 x i8]* }*, double, double }** %0, align 4
  %1 = getelementptr inbounds [3 x { { [6 x i8]* }*, double, double }*], [3 x { { [6 x i8]* }*, double, double }*]* %items, i32 0, i32 1
  store { { [6 x i8]* }*, double, double }* %constructorReturnValue1, { { [6 x i8]* }*, double, double }** %1, align 4
  %2 = getelementptr inbounds [3 x { { [6 x i8]* }*, double, double }*], [3 x { { [6 x i8]* }*, double, double }*]* %items, i32 0, i32 2
  store { { [6 x i8]* }*, double, double }* %constructorReturnValue2, { { [6 x i8]* }*, double, double }** %2, align 4
  %constructorReturnValue4 = call { i32, i32, i8** }* @ArrayIPv_constructorPPvi({ { [6 x i8]* }*, double, double }** %items3, i32 3)
  store { i32, i32, i8** }* %constructorReturnValue4, { i32, i32, i8** }** %array, align 4
  %array5 = load { i32, i32, i8** }*, { i32, i32, i8** }** %array, align 4
  %3 = call { { [6 x i8]* }*, double, double }* @ArrayIPv_geti({ i32, i32, i8** }* %array5, i32 0)
  %\\"&x\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %3, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  store double %x, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return6 = load double, double* %return, align 8
  ret double %return6
}

define internal { { [6 x i8]* }*, double, double }* @\\"classes/array-with-objects-literal.ts$Point$11constructordd\\"(double %x1, double %y2) {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [6 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 0.000000e+00, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  %x = alloca double
  store double %x1, double* %x, align 8
  %y = alloca double
  store double %y2, double* %y, align 8
  %x3 = load double, double* %x, align 8
  %\\"&x4\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double %x3, double* %\\"&x4\\", align 8
  %y5 = load double, double* %y, align 8
  %\\"&y6\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double %y5, double* %\\"&y6\\", align 8
  ret { { [6 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

declare { i32, i32, i8** }* @ArrayIPv_constructorPPvi({ { [6 x i8]* }*, double, double }**, i32)

declare { { [6 x i8]* }*, double, double }* @ArrayIPv_geti({ i32, i32, i8** }*, i32)

declare void @ArrayIPv_setiPv({ i32, i32, i8** }*, i32, { { [6 x i8]* }*, double, double }*)

declare void @speedyJsGc()
"
`;

exports[`Classes class-only-with-attributes 1`] = `
"; ModuleID = 'classes/class-only-with-attributes.ts'
source_filename = \\"classes/class-only-with-attributes.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@ClassOnlyWithAttributes_name = private unnamed_addr constant [24 x i8] c\\"ClassOnlyWithAttributes\\\\00\\"
@ClassOnlyWithAttributes_type_descriptor = private constant { [24 x i8]* } { [24 x i8]* @ClassOnlyWithAttributes_name }

define double @_classOnlyWithAttributes() {
entry:
  %instance = alloca { { [24 x i8]* }*, double, double }*
  %return = alloca double
  %constructorReturnValue = call { { [24 x i8]* }*, double, double }* @\\"classes/class-only-with-attributes.ts$ClassOnlyWithAttributes$11constructor\\"()
  store { { [24 x i8]* }*, double, double }* %constructorReturnValue, { { [24 x i8]* }*, double, double }** %instance, align 4
  %instance1 = load { { [24 x i8]* }*, double, double }*, { { [24 x i8]* }*, double, double }** %instance, align 4
  %instance2 = load { { [24 x i8]* }*, double, double }*, { { [24 x i8]* }*, double, double }** %instance, align 4
  %\\"&x\\" = getelementptr inbounds { { [24 x i8]* }*, double, double }, { { [24 x i8]* }*, double, double }* %instance1, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  %\\"&y\\" = getelementptr inbounds { { [24 x i8]* }*, double, double }, { { [24 x i8]* }*, double, double }* %instance2, i32 0, i32 2
  %y = load double, double* %\\"&y\\", align 8
  %fadd = fadd double %x, %y
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}

define internal { { [24 x i8]* }*, double, double }* @\\"classes/class-only-with-attributes.ts$ClassOnlyWithAttributes$11constructor\\"() {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [24 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [24 x i8]* }*, double, double }, { { [24 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 0.000000e+00, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [24 x i8]* }*, double, double }, { { [24 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  ret { { [24 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

declare void @speedyJsGc()
"
`;

exports[`Classes class-with-attribute-defined-in-constructor 1`] = `
"; ModuleID = 'classes/class-with-attribute-defined-in-constructor.ts'
source_filename = \\"classes/class-with-attribute-defined-in-constructor.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@ClassWithAttributeInitializer_name = private unnamed_addr constant [30 x i8] c\\"ClassWithAttributeInitializer\\\\00\\"
@ClassWithAttributeInitializer_type_descriptor = private constant { [30 x i8]* } { [30 x i8]* @ClassWithAttributeInitializer_name }

define double @_classWithConstructor() {
entry:
  %instance = alloca { { [30 x i8]* }*, double, double }*
  %return = alloca double
  %constructorReturnValue = call { { [30 x i8]* }*, double, double }* @\\"classes/class-with-attribute-defined-in-constructor.ts$ClassWithAttributeInitializer$11constructordd\\"(double 1.000000e+01, double 1.500000e+01)
  store { { [30 x i8]* }*, double, double }* %constructorReturnValue, { { [30 x i8]* }*, double, double }** %instance, align 4
  %instance1 = load { { [30 x i8]* }*, double, double }*, { { [30 x i8]* }*, double, double }** %instance, align 4
  %instance2 = load { { [30 x i8]* }*, double, double }*, { { [30 x i8]* }*, double, double }** %instance, align 4
  %\\"&x\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %instance1, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  %\\"&y\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %instance2, i32 0, i32 2
  %y = load double, double* %\\"&y\\", align 8
  %fadd = fadd double %x, %y
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}

define internal { { [30 x i8]* }*, double, double }* @\\"classes/class-with-attribute-defined-in-constructor.ts$ClassWithAttributeInitializer$11constructordd\\"(double %x1, double %y3) {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [30 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 0.000000e+00, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  %x = alloca double
  store double %x1, double* %x, align 8
  %\\"&x2\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double %x1, double* %\\"&x2\\", align 8
  %y = alloca double
  store double %y3, double* %y, align 8
  %\\"&y4\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double %y3, double* %\\"&y4\\", align 8
  ret { { [30 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

declare void @speedyJsGc()
"
`;

exports[`Classes class-with-attribute-initializer 1`] = `
"; ModuleID = 'classes/class-with-attribute-initializer.ts'
source_filename = \\"classes/class-with-attribute-initializer.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@ClassWithAttributeInitializer_name = private unnamed_addr constant [30 x i8] c\\"ClassWithAttributeInitializer\\\\00\\"
@ClassWithAttributeInitializer_type_descriptor = private constant { [30 x i8]* } { [30 x i8]* @ClassWithAttributeInitializer_name }

define double @_classWithConstructor() {
entry:
  %instance = alloca { { [30 x i8]* }*, double, double }*
  %return = alloca double
  %constructorReturnValue = call { { [30 x i8]* }*, double, double }* @\\"classes/class-with-attribute-initializer.ts$ClassWithAttributeInitializer$11constructor\\"()
  store { { [30 x i8]* }*, double, double }* %constructorReturnValue, { { [30 x i8]* }*, double, double }** %instance, align 4
  %instance1 = load { { [30 x i8]* }*, double, double }*, { { [30 x i8]* }*, double, double }** %instance, align 4
  %instance2 = load { { [30 x i8]* }*, double, double }*, { { [30 x i8]* }*, double, double }** %instance, align 4
  %\\"&x\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %instance1, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  %\\"&y\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %instance2, i32 0, i32 2
  %y = load double, double* %\\"&y\\", align 8
  %fadd = fadd double %x, %y
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}

define internal { { [30 x i8]* }*, double, double }* @\\"classes/class-with-attribute-initializer.ts$ClassWithAttributeInitializer$11constructor\\"() {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [30 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 1.000000e+01, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [30 x i8]* }*, double, double }, { { [30 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  ret { { [30 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

declare void @speedyJsGc()
"
`;

exports[`Classes class-with-constructor 1`] = `
"; ModuleID = 'classes/class-with-constructor.ts'
source_filename = \\"classes/class-with-constructor.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@ClassWithConstructor_name = private unnamed_addr constant [21 x i8] c\\"ClassWithConstructor\\\\00\\"
@ClassWithConstructor_type_descriptor = private constant { [21 x i8]* } { [21 x i8]* @ClassWithConstructor_name }

define double @_classWithConstructor() {
entry:
  %instance = alloca { { [21 x i8]* }*, double, double }*
  %return = alloca double
  %constructorReturnValue = call { { [21 x i8]* }*, double, double }* @\\"classes/class-with-constructor.ts$ClassWithConstructor$11constructordd\\"(double 1.000000e+01, double 2.000000e+01)
  store { { [21 x i8]* }*, double, double }* %constructorReturnValue, { { [21 x i8]* }*, double, double }** %instance, align 4
  %instance1 = load { { [21 x i8]* }*, double, double }*, { { [21 x i8]* }*, double, double }** %instance, align 4
  %instance2 = load { { [21 x i8]* }*, double, double }*, { { [21 x i8]* }*, double, double }** %instance, align 4
  %\\"&x\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %instance1, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  %\\"&y\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %instance2, i32 0, i32 2
  %y = load double, double* %\\"&y\\", align 8
  %fadd = fadd double %x, %y
  store double %fadd, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load double, double* %return, align 8
  ret double %return3
}

define internal { { [21 x i8]* }*, double, double }* @\\"classes/class-with-constructor.ts$ClassWithConstructor$11constructordd\\"(double %x1, double %y2) {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [21 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 0.000000e+00, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  %x = alloca double
  store double %x1, double* %x, align 8
  %y = alloca double
  store double %y2, double* %y, align 8
  %x3 = load double, double* %x, align 8
  %\\"&x4\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double %x3, double* %\\"&x4\\", align 8
  %y5 = load double, double* %y, align 8
  %\\"&y6\\" = getelementptr inbounds { { [21 x i8]* }*, double, double }, { { [21 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double %y5, double* %\\"&y6\\", align 8
  ret { { [21 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

declare void @speedyJsGc()
"
`;

exports[`Classes class-with-methods 1`] = `
"; ModuleID = 'classes/class-with-methods.ts'
source_filename = \\"classes/class-with-methods.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@Point_name = private unnamed_addr constant [6 x i8] c\\"Point\\\\00\\"
@Point_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Point_name }

define void @_classWithMethods(double %x1, double %y2) {
entry:
  %other = alloca { { [6 x i8]* }*, double, double }*
  %center = alloca { { [6 x i8]* }*, double, double }*
  %x = alloca double
  store double %x1, double* %x, align 8
  %y = alloca double
  store double %y2, double* %y, align 8
  %constructorReturnValue = call { { [6 x i8]* }*, double, double }* @\\"classes/class-with-methods.ts$Point$11constructordd\\"(double 0.000000e+00, double 0.000000e+00)
  store { { [6 x i8]* }*, double, double }* %constructorReturnValue, { { [6 x i8]* }*, double, double }** %center, align 4
  %x3 = load double, double* %x, align 8
  %y4 = load double, double* %y, align 8
  %constructorReturnValue5 = call { { [6 x i8]* }*, double, double }* @\\"classes/class-with-methods.ts$Point$11constructordd\\"(double %x3, double %y4)
  store { { [6 x i8]* }*, double, double }* %constructorReturnValue5, { { [6 x i8]* }*, double, double }** %other, align 4
  %center6 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %center, align 4
  %other7 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %other, align 4
  %distanceToReturnValue = call double @\\"classes/class-with-methods.ts$Point$10distanceTo5PointI\\"({ { [6 x i8]* }*, double, double }* %center6, { { [6 x i8]* }*, double, double }* %other7)
  ret void
}

define internal { { [6 x i8]* }*, double, double }* @\\"classes/class-with-methods.ts$Point$11constructordd\\"(double %x1, double %y2) {
entry:
  %\\"thisVoid*\\" = call i8* @malloc(i32 24)
  %this = bitcast i8* %\\"thisVoid*\\" to { { [6 x i8]* }*, double, double }*
  %\\"&x\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double 0.000000e+00, double* %\\"&x\\"
  %\\"&y\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double 0.000000e+00, double* %\\"&y\\"
  %x = alloca double
  store double %x1, double* %x, align 8
  %y = alloca double
  store double %y2, double* %y, align 8
  %x3 = load double, double* %x, align 8
  %\\"&x4\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 1
  store double %x3, double* %\\"&x4\\", align 8
  %y5 = load double, double* %y, align 8
  %\\"&y6\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this, i32 0, i32 2
  store double %y5, double* %\\"&y6\\", align 8
  ret { { [6 x i8]* }*, double, double }* %this
}

declare i8* @malloc(i32)

define internal double @\\"classes/class-with-methods.ts$Point$10distanceTo5PointI\\"({ { [6 x i8]* }*, double, double }* %this1, { { [6 x i8]* }*, double, double }* %to2) {
entry:
  %return = alloca double
  %this = alloca { { [6 x i8]* }*, double, double }*
  store { { [6 x i8]* }*, double, double }* %this1, { { [6 x i8]* }*, double, double }** %this, align 4
  %to = alloca { { [6 x i8]* }*, double, double }*
  store { { [6 x i8]* }*, double, double }* %to2, { { [6 x i8]* }*, double, double }** %to, align 4
  %mathPtr = load { { [5 x i8]* }* }*, { { [5 x i8]* }* }** @Math_ptr, align 4
  %mathPtr3 = load { { [5 x i8]* }* }*, { { [5 x i8]* }* }** @Math_ptr, align 4
  %this4 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %this, align 4
  %to5 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %to, align 4
  %\\"&x\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this4, i32 0, i32 1
  %x = load double, double* %\\"&x\\", align 8
  %\\"&x6\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %to5, i32 0, i32 1
  %x7 = load double, double* %\\"&x6\\", align 8
  %fsub = fsub double %x, %x7
  %powReturnValue = call double @Math_powdd(double %fsub, double 2.000000e+00)
  %mathPtr8 = load { { [5 x i8]* }* }*, { { [5 x i8]* }* }** @Math_ptr, align 4
  %this9 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %this, align 4
  %to10 = load { { [6 x i8]* }*, double, double }*, { { [6 x i8]* }*, double, double }** %to, align 4
  %\\"&y\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %this9, i32 0, i32 2
  %y = load double, double* %\\"&y\\", align 8
  %\\"&y11\\" = getelementptr inbounds { { [6 x i8]* }*, double, double }, { { [6 x i8]* }*, double, double }* %to10, i32 0, i32 2
  %y12 = load double, double* %\\"&y11\\", align 8
  %fsub13 = fsub double %y, %y12
  %powReturnValue14 = call double @Math_powdd(double %fsub13, double 2.000000e+00)
  %fadd = fadd double %powReturnValue, %powReturnValue14
  %sqrtReturnValue = call double @Math_sqrtd(double %fadd)
  store double %sqrtReturnValue, double* %return, align 8
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return15 = load double, double* %return, align 8
  ret double %return15
}

declare double @Math_powdd(double, double)

declare double @Math_sqrtd(double)

declare void @speedyJsGc()
"
`;
