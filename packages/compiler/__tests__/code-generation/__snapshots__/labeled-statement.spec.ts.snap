// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LabeledStatement break-to-label 1`] = `
"; ModuleID = 'labeled-statement/break-to-label.ts'
source_filename = \\"labeled-statement/break-to-label.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define i32 @_breakToLabelWithReturnInNormalEnd() {
entry:
  %i = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %i1 = load i32, i32* %i, align 4
  %add = add i32 %i1, 1
  store i32 %add, i32* %i, align 4
  %i2 = load i32, i32* %i, align 4
  %cmpEQ = icmp eq i32 %i2, 1
  br i1 %cmpEQ, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %outer_block.end

if.end:                                           ; preds = %entry
  store i32 10, i32* %return, align 4
  br label %returnBlock

outer_block.end:                                  ; preds = %if.then
  %i3 = load i32, i32* %i, align 4
  store i32 %i3, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %outer_block.end, %if.end
  %return4 = load i32, i32* %return, align 4
  ret i32 %return4
}
"
`;

exports[`LabeledStatement break-to-label-with-return-in-normal-end-block 1`] = `
"; ModuleID = 'labeled-statement/break-to-label-with-return-in-normal-end-block.ts'
source_filename = \\"labeled-statement/break-to-label-with-return-in-normal-end-block.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { i1 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math zeroinitializer
@Math_ptr = private constant %class.Math* @Math_object

define i32 @_breakToLabel() {
entry:
  %i = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 0, i32* %i, align 4
  %i1 = load i32, i32* %i, align 4
  %add = add i32 %i1, 1
  store i32 %add, i32* %i, align 4
  %i2 = load i32, i32* %i, align 4
  %cmpEQ = icmp eq i32 %i2, 1
  br i1 %cmpEQ, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %outer_block.end

if.end:                                           ; preds = %entry
  %i3 = load i32, i32* %i, align 4
  %add4 = add i32 %i3, 1
  store i32 %add4, i32* %i, align 4
  br label %outer_block.end

outer_block.end:                                  ; preds = %if.end, %if.then
  %i5 = load i32, i32* %i, align 4
  store i32 %i5, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %outer_block.end
  %return6 = load i32, i32* %return, align 4
  ret i32 %return6
}
"
`;
