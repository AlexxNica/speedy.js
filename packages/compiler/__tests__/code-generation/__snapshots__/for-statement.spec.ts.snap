// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ForStatement for-empty 1`] = `
"; ModuleID = 'for/for-empty.ts'
source_filename = \\"for/for-empty.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_forEmpty() {
entry:
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  br label %for.end

for.inc:                                          ; No predecessors!
  br label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
"
`;

exports[`ForStatement with-condition 1`] = `
"; ModuleID = 'for/with-condition.ts'
source_filename = \\"for/with-condition.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_forWithCondition() {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i1 = load i32, i32* %i, align 4
  %cmpLT = icmp slt i32 %i1, 10
  br i1 %cmpLT, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}
"
`;

exports[`ForStatement with-initializer 1`] = `
"; ModuleID = 'for/with-initializer.ts'
source_filename = \\"for/with-initializer.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_forWithInitializer() {
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4
  br label %for.body

for.body:                                         ; preds = %for.inc, %entry
  br label %for.end

for.inc:                                          ; No predecessors!
  br label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
"
`;

exports[`ForStatement with-return-statement 1`] = `
"; ModuleID = 'for/with-return-statement.ts'
source_filename = \\"for/with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define i1 @_isPrime(i32 %x) {
entry:
  %i = alloca i32, align 4
  %x.addr = alloca i32, align 4
  %return = alloca i1, align 1
  store i32 %x, i32* %x.addr, align 4
  %x.addr1 = load i32, i32* %x.addr, align 4
  %cmpLE = icmp sle i32 %x.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %returnBlock

if.end:                                           ; preds = %entry
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %i2 = load i32, i32* %i, align 4
  %x.addr3 = load i32, i32* %x.addr, align 4
  %x.addr3AsDouble = sitofp i32 %x.addr3 to double
  %sqrtReturnValue = call double @llvm.sqrt.f64(double %x.addr3AsDouble)
  %sqrtReturnValueAsInt32 = call i32 @toInt32d(double %sqrtReturnValue)
  %cmpLT = icmp slt i32 %i2, %sqrtReturnValueAsInt32
  br i1 %cmpLT, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %x.addr4 = load i32, i32* %x.addr, align 4
  %i5 = load i32, i32* %i, align 4
  %srem = srem i32 %x.addr4, %i5
  %cmpEQ = icmp eq i32 %srem, 0
  br i1 %cmpEQ, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.body
  store i1 false, i1* %return, align 1
  br label %returnBlock

if.end7:                                          ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end7
  %i8 = load i32, i32* %i, align 4
  %add = add nsw i32 %i8, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %return, align 1
  br label %returnBlock

returnBlock:                                      ; preds = %for.end, %if.then6, %if.then
  %return9 = load i1, i1* %return, align 1
  ret i1 %return9
}

; Function Attrs: nounwind readnone
declare double @llvm.sqrt.f64(double) #0

; Function Attrs: alwaysinline readnone
declare i32 @toInt32d(double) #1

attributes #0 = { nounwind readnone }
attributes #1 = { alwaysinline readnone }
"
`;

exports[`ForStatement with-updater 1`] = `
"; ModuleID = 'for/with-updater.ts'
source_filename = \\"for/with-updater.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_forWithUpdater() {
entry:
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 0, i32* %x, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i1 = load i32, i32* %i, align 4
  %cmpLT = icmp slt i32 %i1, 10
  br i1 %cmpLT, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %i2 = load i32, i32* %i, align 4
  store i32 %i2, i32* %x, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %i3 = load i32, i32* %i, align 4
  %add = add nsw i32 %i3, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}
"
`;
