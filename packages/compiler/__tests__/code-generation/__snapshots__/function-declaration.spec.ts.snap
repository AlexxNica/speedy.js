// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionDeclaration array-passing 1`] = `
"; ModuleID = 'function-declaration/array-passing.ts'
source_filename = \\"function-declaration/array-passing.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object
@items = private local_unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5]

define i32 @_passesArray() {
entry:
  %items = alloca [5 x i32]
  %array = alloca { i32, i32, i32* }*
  %return = alloca i32
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = bitcast [5 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([5 x i32]* @items to i8*), i32 20, i32 0, i1 false)
  %constructorReturnValue = call { i32, i32, i32* }* @ArrayIi_constructorPii(i32* %items1, i32 5)
  store { i32, i32, i32* }* %constructorReturnValue, { i32, i32, i32* }** %array, align 4
  %array2 = load { i32, i32, i32* }*, { i32, i32, i32* }** %array, align 4
  %arrayLengthReturnValue = call i32 @\\"function-declaration/array-passing.ts$11arrayLength5ArrayIi\\"({ i32, i32, i32* }* %array2)
  store i32 %arrayLengthReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load i32, i32* %return, align 4
  ret i32 %return3
}

declare { i32, i32, i32* }* @ArrayIi_constructorPii(i32*, i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

define internal i32 @\\"function-declaration/array-passing.ts$11arrayLength5ArrayIi\\"({ i32, i32, i32* }* %array1) {
entry:
  %return = alloca i32
  %array = alloca { i32, i32, i32* }*
  store { i32, i32, i32* }* %array1, { i32, i32, i32* }** %array, align 4
  %array2 = load { i32, i32, i32* }*, { i32, i32, i32* }** %array, align 4
  %0 = call i32 @ArrayIi_length({ i32, i32, i32* }* %array2)
  store i32 %0, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load i32, i32* %return, align 4
  ret i32 %return3
}

declare i32 @ArrayIi_length({ i32, i32, i32* }*)

declare void @ArrayIi_lengthi({ i32, i32, i32* }*, i32)

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
"
`;

exports[`FunctionDeclaration branched-function-returning-void 1`] = `
"; ModuleID = 'function-declaration/branched-function-returning-void.ts'
source_filename = \\"function-declaration/branched-function-returning-void.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_branchedFunctionReturningVoid(i32 %arg1) {
entry:
  %count = alloca i32
  %arg = alloca i32
  store i32 %arg1, i32* %arg, align 4
  %arg2 = load i32, i32* %arg, align 4
  %cmpGT = icmp sgt i32 %arg2, 10
  br i1 %cmpGT, label %then, label %else

then:                                             ; preds = %entry
  store i32 0, i32* %count, align 4
  br label %if-successor

else:                                             ; preds = %entry
  %arg3 = load i32, i32* %arg, align 4
  store i32 %arg3, i32* %count, align 4
  br label %if-successor

if-successor:                                     ; preds = %else, %then
  %count4 = load i32, i32* %count, align 4
  %add = add i32 %count4, 1
  store i32 %add, i32* %count, align 4
  ret void
}
"
`;

exports[`FunctionDeclaration branched-function-with-return-value 1`] = `
"; ModuleID = 'function-declaration/branched-function-with-return-value.ts'
source_filename = \\"function-declaration/branched-function-with-return-value.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define i1 @_isPrime(i32 %x1) {
entry:
  %return = alloca i1
  %x = alloca i32
  store i32 %x1, i32* %x, align 4
  %x2 = load i32, i32* %x, align 4
  %cmpLE = icmp sle i32 %x2, 2
  br i1 %cmpLE, label %then, label %else

then:                                             ; preds = %entry
  store i1 true, i1* %return, align 1
  br label %if-successor

else:                                             ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %if-successor

if-successor:                                     ; preds = %then, %else
  %return3 = load i1, i1* %return, align 1
  ret i1 %return3
}
"
`;

exports[`FunctionDeclaration transitive-function 1`] = `
"; ModuleID = 'function-declaration/transitive-function.ts'
source_filename = \\"function-declaration/transitive-function.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define i32 @_fib(i32 %value1) {
entry:
  %return = alloca i32
  %value = alloca i32
  store i32 %value1, i32* %value, align 4
  %value2 = load i32, i32* %value, align 4
  %fibSyncReturnValue = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %value2)
  store i32 %fibSyncReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load i32, i32* %return, align 4
  ret i32 %return3
}

define internal i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %value1) {
entry:
  %return = alloca i32
  %value = alloca i32
  store i32 %value1, i32* %value, align 4
  %value2 = load i32, i32* %value, align 4
  %cmpLE = icmp sle i32 %value2, 2
  br i1 %cmpLE, label %then, label %if-successor

then:                                             ; preds = %entry
  store i32 1, i32* %return, align 4
  br label %returnBlock

if-successor:                                     ; preds = %entry
  %value3 = load i32, i32* %value, align 4
  %sub = sub i32 %value3, 2
  %fibSyncReturnValue = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %sub)
  %value4 = load i32, i32* %value, align 4
  %sub5 = sub i32 %value4, 1
  %fibSyncReturnValue6 = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %sub5)
  %add = add i32 %fibSyncReturnValue, %fibSyncReturnValue6
  store i32 %add, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if-successor, %then
  %return7 = load i32, i32* %return, align 4
  ret i32 %return7
}
"
`;

exports[`FunctionDeclaration void-function-with-return-statement 1`] = `
"; ModuleID = 'function-declaration/void-function-with-return-statement.ts'
source_filename = \\"function-declaration/void-function-with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant { { [5 x i8]* }* } { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant { { [5 x i8]* }* }* @Math_object

define void @_voidFunctionWithReturnStatement(i32 %arg1) {
entry:
  %count = alloca i32
  %arg = alloca i32
  store i32 %arg1, i32* %arg, align 4
  %arg2 = load i32, i32* %arg, align 4
  %cmpLT = icmp slt i32 %arg2, 10
  br i1 %cmpLT, label %then, label %if-successor

then:                                             ; preds = %entry
  br label %returnBlock

if-successor:                                     ; preds = %entry
  %arg3 = load i32, i32* %arg, align 4
  store i32 %arg3, i32* %count, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if-successor, %then
  ret void
}
"
`;
