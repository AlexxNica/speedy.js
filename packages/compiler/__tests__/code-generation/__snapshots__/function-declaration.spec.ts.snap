// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionDeclaration branched-function-returning-void 1`] = `
"; ModuleID = 'function-declaration/branched-function-returning-void.ts'
source_filename = \\"function-declaration/branched-function-returning-void.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_branchedFunctionReturningVoid(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpGT = icmp sgt i32 %arg.addr1, 10
  br i1 %cmpGT, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %count3 = load i32, i32* %count, align 4
  %add = add nsw i32 %count3, 1
  store i32 %add, i32* %count, align 4
  ret void
}
"
`;

exports[`FunctionDeclaration branched-function-with-return-value 1`] = `
"; ModuleID = 'function-declaration/branched-function-with-return-value.ts'
source_filename = \\"function-declaration/branched-function-with-return-value.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define i1 @_isPrime(i32 %x) {
entry:
  %x.addr = alloca i32, align 4
  %return = alloca i1, align 1
  store i32 %x, i32* %x.addr, align 4
  %x.addr1 = load i32, i32* %x.addr, align 4
  %cmpLE = icmp sle i32 %x.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %return, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %if.else
  %return2 = load i1, i1* %return, align 1
  ret i1 %return2
}
"
`;

exports[`FunctionDeclaration void-function-with-return-statement 1`] = `
"; ModuleID = 'function-declaration/void-function-with-return-statement.ts'
source_filename = \\"function-declaration/void-function-with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_voidFunctionWithReturnStatement(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpLT = icmp slt i32 %arg.addr1, 10
  br i1 %cmpLT, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %returnBlock

if.end:                                           ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if.end, %if.then
  ret void
}
"
`;
