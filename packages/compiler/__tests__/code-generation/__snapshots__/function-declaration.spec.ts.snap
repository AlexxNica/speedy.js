// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FunctionDeclaration array-passing 1`] = `
"; ModuleID = 'function-declaration/array-passing.ts'
source_filename = \\"function-declaration/array-passing.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }
%class.Array = type { i32*, i32, i32 }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object
@items = private local_unnamed_addr constant [5 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5]

define i32 @_passesArray() {
entry:
  %items = alloca [5 x i32], align 4
  %array = alloca %class.Array*, align 4
  %return = alloca i32, align 4
  %items1 = getelementptr inbounds [5 x i32], [5 x i32]* %items, i32 0, i32 0
  %0 = bitcast [5 x i32]* %items to i8*
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %0, i8* bitcast ([5 x i32]* @items to i8*), i32 20, i32 0, i1 false)
  %constructorReturnValue = call %class.Array* @ArrayIi_constructorPii(i32* %items1, i32 5)
  store %class.Array* %constructorReturnValue, %class.Array** %array, align 4
  %array2 = load %class.Array*, %class.Array** %array, align 4
  %arrayLengthReturnValue = call i32 @\\"function-declaration/array-passing.ts$11arrayLength5ArrayIi\\"(%class.Array* %array2)
  store i32 %arrayLengthReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return3 = load i32, i32* %return, align 4
  ret i32 %return3
}

declare hidden %class.Array* @ArrayIi_constructorPii(i32* dereferenceable(12), i32)

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture writeonly, i8* nocapture readonly, i32, i32, i1) #0

define linkonce_odr i32 @\\"function-declaration/array-passing.ts$11arrayLength5ArrayIi\\"(%class.Array* dereferenceable(12) %array) {
entry:
  %array.addr = alloca %class.Array*, align 4
  %return = alloca i32, align 4
  store %class.Array* %array, %class.Array** %array.addr, align 4
  %array.addr1 = load %class.Array*, %class.Array** %array.addr, align 4
  %length = call i32 @ArrayIi_length(%class.Array* dereferenceable(12) %array.addr1)
  store i32 %length, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load i32, i32* %return, align 4
  ret i32 %return2
}

; Function Attrs: alwaysinline nounwind readonly
declare i32 @ArrayIi_length(%class.Array* nocapture readonly) #1

; Function Attrs: alwaysinline
declare void @ArrayIi_lengthi(%class.Array* nocapture readonly, i32) #2

declare void @speedyJsGc()

attributes #0 = { argmemonly nounwind }
attributes #1 = { alwaysinline nounwind readonly }
attributes #2 = { alwaysinline }
"
`;

exports[`FunctionDeclaration branched-function-returning-void 1`] = `
"; ModuleID = 'function-declaration/branched-function-returning-void.ts'
source_filename = \\"function-declaration/branched-function-returning-void.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_branchedFunctionReturningVoid(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpGT = icmp sgt i32 %arg.addr1, 10
  br i1 %cmpGT, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %count, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %count3 = load i32, i32* %count, align 4
  %add = add i32 %count3, 1
  store i32 %add, i32* %count, align 4
  ret void
}
"
`;

exports[`FunctionDeclaration branched-function-with-return-value 1`] = `
"; ModuleID = 'function-declaration/branched-function-with-return-value.ts'
source_filename = \\"function-declaration/branched-function-with-return-value.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define i1 @_isPrime(i32 %x) {
entry:
  %x.addr = alloca i32, align 4
  %return = alloca i1, align 1
  store i32 %x, i32* %x.addr, align 4
  %x.addr1 = load i32, i32* %x.addr, align 4
  %cmpLE = icmp sle i32 %x.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i1 true, i1* %return, align 1
  br label %if.end

if.else:                                          ; preds = %entry
  store i1 false, i1* %return, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %if.else
  %return2 = load i1, i1* %return, align 1
  ret i1 %return2
}
"
`;

exports[`FunctionDeclaration transitive-function 1`] = `
"; ModuleID = 'function-declaration/transitive-function.ts'
source_filename = \\"function-declaration/transitive-function.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define i32 @_fib(i32 %value) {
entry:
  %value.addr = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  %value.addr1 = load i32, i32* %value.addr, align 4
  %fibSyncReturnValue = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %value.addr1)
  store i32 %fibSyncReturnValue, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %entry
  %return2 = load i32, i32* %return, align 4
  ret i32 %return2
}

define linkonce_odr i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %value) {
entry:
  %value.addr = alloca i32, align 4
  %return = alloca i32, align 4
  store i32 %value, i32* %value.addr, align 4
  %value.addr1 = load i32, i32* %value.addr, align 4
  %cmpLE = icmp sle i32 %value.addr1, 2
  br i1 %cmpLE, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %return, align 4
  br label %returnBlock

if.end:                                           ; preds = %entry
  %value.addr2 = load i32, i32* %value.addr, align 4
  %sub = sub i32 %value.addr2, 2
  %fibSyncReturnValue = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %sub)
  %value.addr3 = load i32, i32* %value.addr, align 4
  %sub4 = sub i32 %value.addr3, 1
  %fibSyncReturnValue5 = call i32 @\\"function-declaration/transitive-function.ts$7fibSynci\\"(i32 %sub4)
  %add = add i32 %fibSyncReturnValue, %fibSyncReturnValue5
  store i32 %add, i32* %return, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if.end, %if.then
  %return6 = load i32, i32* %return, align 4
  ret i32 %return6
}
"
`;

exports[`FunctionDeclaration void-function-with-return-statement 1`] = `
"; ModuleID = 'function-declaration/void-function-with-return-statement.ts'
source_filename = \\"function-declaration/void-function-with-return-statement.ts\\"
target datalayout = \\"e-m:e-p:32:32-i64:64-n32:64-S128\\"
target triple = \\"wasm32-unknown-unknown\\"

%class.Math = type { { [5 x i8]* }* }

@Array_name = private unnamed_addr constant [6 x i8] c\\"Array\\\\00\\"
@Array_type_descriptor = private constant { [6 x i8]* } { [6 x i8]* @Array_name }
@Math_name = private unnamed_addr constant [5 x i8] c\\"Math\\\\00\\"
@Math_type_descriptor = private constant { [5 x i8]* } { [5 x i8]* @Math_name }
@Math_object = private constant %class.Math { { [5 x i8]* }* @Math_type_descriptor }
@Math_ptr = private constant %class.Math* @Math_object

define void @_voidFunctionWithReturnStatement(i32 %arg) {
entry:
  %count = alloca i32, align 4
  %arg.addr = alloca i32, align 4
  store i32 %arg, i32* %arg.addr, align 4
  %arg.addr1 = load i32, i32* %arg.addr, align 4
  %cmpLT = icmp slt i32 %arg.addr1, 10
  br i1 %cmpLT, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %returnBlock

if.end:                                           ; preds = %entry
  %arg.addr2 = load i32, i32* %arg.addr, align 4
  store i32 %arg.addr2, i32* %count, align 4
  br label %returnBlock

returnBlock:                                      ; preds = %if.end, %if.then
  ret void
}
"
`;
